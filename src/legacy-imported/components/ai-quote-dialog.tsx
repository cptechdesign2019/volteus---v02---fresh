// src/components/ai-quote-dialog.tsx
'use client';

import { useState, useRef, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Sparkles, Loader2, Mic } from 'lucide-react';
import { generateQuoteFromPromptAction } from '@/app/actions';
import { useQuotes } from '@/contexts/quote-context';
import type { Quote, Product } from '@/lib/types';
import { useProducts } from '@/contexts/product-context';
import { cn } from '@/lib/utils';
import { Alert, AlertDescription, AlertTitle } from './ui/alert';
import { AlertTriangle } from 'lucide-react';


interface AiQuoteDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function AiQuoteDialog({ isOpen, onOpenChange }: AiQuoteDialogProps) {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const { toast } = useToast();
  const { addQuote } = useQuotes();
  const { products: productLibrary } = useProducts();
  const router = useRouter();

  const recognitionRef = useRef<any>(null);
  const finalTranscriptRef = useRef('');

   useEffect(() => {
    if (typeof window === 'undefined' || !('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognitionRef.current = new SpeechRecognition();
    const recognition = recognitionRef.current;
    
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';

    recognition.onresult = (event: any) => {
        let interim_transcript = '';
        let final_transcript_chunk = '';

        for (let i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
                final_transcript_chunk += event.results[i][0].transcript;
            } else {
                interim_transcript += event.results[i][0].transcript;
            }
        }
        finalTranscriptRef.current += final_transcript_chunk;
        setPrompt(finalTranscriptRef.current + interim_transcript);
    };

    recognition.onend = () => {
        setIsListening(false);
    };

    recognition.onerror = (event: any) => {
        console.error('Speech recognition error', event.error);
        toast({
            variant: "destructive",
            title: "Voice Recognition Error",
            description: event.error === 'no-speech' ? 'No speech was detected.' : `An error occurred: ${event.error}`,
        });
        setIsListening(false);
    };
  }, [toast]);

  const handleToggleListening = () => {
    if (!recognitionRef.current) {
        toast({
            variant: "destructive",
            title: "Unsupported Browser",
            description: "Your browser does not support voice recognition.",
        });
        return;
    }

    if (isListening) {
        recognitionRef.current.stop();
    } else {
        finalTranscriptRef.current = prompt ? prompt.trim() + ' ' : '';
        setIsListening(true);
        recognitionRef.current.start();
    }
  };


  const handleGenerateQuote = async () => {
    if (!prompt.trim()) {
      toast({ variant: 'destructive', title: 'Error', description: 'Prompt cannot be empty.' });
      return;
    }
    
    if (isListening) {
      recognitionRef.current?.stop();
    }

    setIsGenerating(true);
    try {
      const result = await generateQuoteFromPromptAction(prompt);

      if (result.error || !result.quoteData) {
        throw new Error(result.error || 'Failed to get structured data from AI.');
      }

      const { quoteName, customerInfo, equipment, scopeOfWork } = result.quoteData;
      
      const productMap = new Map(productLibrary.map(p => [p.modelNumber, p]));

      const items = equipment.map(item => {
        const product = productMap.get(item.modelNumber);
        return product ? { ...product, quantity: item.quantity } : null;
      }).filter((item): item is Product & { quantity: number } => item !== null);

      const quotePayload: Partial<Quote> = {
        quoteName,
        customerType: 'new',
        projectType: customerInfo.projectType,
        customerTypeForPricing: customerInfo.projectType,
        options: [{
          id: '', // This will be generated by addQuote
          name: 'Option 1',
          areas: [{ id: '', name: 'Main Area', items: items }],
          scopeOfWork: scopeOfWork || '',
          // Default values, will be filled in by addQuote
          laborCategories: [],
          totals: {} as any,
        }],
      };
      
      const customerPayload = {
        companyName: customerInfo.companyName,
        primaryContact: {
          name: customerInfo.contactName,
          email: customerInfo.contactEmail,
        },
        projectType: customerInfo.projectType,
      };

      const newQuote = await addQuote(quotePayload, customerPayload);

      toast({
        title: 'Quote Generated!',
        description: 'Redirecting to the quote builder...',
      });

      router.push(`/quotes/build/${newQuote.id}`);
      onOpenChange(false); // Close dialog on success

    } catch (error) {
      console.error(error);
      toast({
        variant: 'destructive',
        title: 'Generation Failed',
        description: (error as Error).message || 'An unexpected error occurred.',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const isBrowserUnsupported = typeof window !== 'undefined' && !('SpeechRecognition' in window || 'webkitSpeechRecognition' in window);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Generate Quote with AI</DialogTitle>
          <DialogDescription>
            Describe the quote you want to create in as much detail as possible. Include customer info, equipment, and scope details.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4">
          <div className="space-y-2">
            <Label htmlFor="ai-prompt">Your Prompt</Label>
            <Textarea
              id="ai-prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="e.g., 'Create a quote for ABC Corp, contact is John Doe at john@abccorp.com. They need a conference room with a 75-inch TV, a soundbar, and a tabletop microphone. They also need us to install everything.'"
              rows={10}
              disabled={isGenerating}
            />
          </div>
          {isBrowserUnsupported && (
             <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Voice Input Not Supported</AlertTitle>
                <AlertDescription>Your browser does not support the Web Speech API for voice dictation.</AlertDescription>
            </Alert>
          )}
        </div>
        <DialogFooter>
          <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isGenerating}>Cancel</Button>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="icon" onClick={handleToggleListening} title={isListening ? 'Stop listening' : 'Start listening'} disabled={isGenerating || isBrowserUnsupported}>
                <Mic className={cn("h-5 w-5", isListening && "text-destructive animate-pulse")} />
                <span className="sr-only">{isListening ? 'Stop listening' : 'Start listening'}</span>
            </Button>
            <Button onClick={handleGenerateQuote} disabled={!prompt.trim() || isGenerating}>
                {isGenerating ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                Generate Quote
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
